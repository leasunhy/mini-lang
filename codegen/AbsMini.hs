

module AbsMini where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = PStms [Stm]
  deriving (Eq, Ord, Show, Read)

data Type
    = Type_double | Type_int | Type_string | Type_bool | Type_void
  deriving (Eq, Ord, Show, Read)

data Stm
    = SDefi Type [Assign]
    | SDecl Type [Var]
    | SPrint Exp
    | SAssign Assign
    | SRet Exp
    | SVRet
    | SWhile Exp Stm
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SExp Exp
    | SEmpty
    | SBlock [Stm]
    | SFunDfn Type Ident [Param] [Stm]
  deriving (Eq, Ord, Show, Read)

data Param = Param Type Var
  deriving (Eq, Ord, Show, Read)

data Assign = Assign Var Exp
  deriving (Eq, Ord, Show, Read)

data Var = Var Ident
  deriving (Eq, Ord, Show, Read)

data Value = VInt Integer | VFlo Double | VStr String
  deriving (Eq, Ord, Show, Read)

data Exp
    = EILit Integer
    | EFLit Double
    | ESLit String
    | EBTLit
    | EBFLit
    | EVar Var
    | EFunInv Ident [Exp]
    | EPoInc Var
    | EPoDec Var
    | EPrInc Var
    | EPrDec Var
    | ENegate Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EOrdLT Exp Exp
    | EOrdLE Exp Exp
    | EOrdGT Exp Exp
    | EOrdGE Exp Exp
    | EOrdEQ Exp Exp
    | EOrdNE Exp Exp
    | EConj Exp Exp
    | EDisj Exp Exp
    | EAssign Assign
  deriving (Eq, Ord, Show, Read)

